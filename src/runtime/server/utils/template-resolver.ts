import type { Component } from 'vue'
import type { EmailTemplateInfo } from './virtual-templates'

// Email templates and their metadata loaded from the virtual module
let emailTemplates: Record<string, Component> = {}
let emailTemplateMapping: Record<string, EmailTemplateInfo> = {}

// Initialization state tracking
let initialized = false
let initPromise: Promise<void> | null = null

/**
 * Initializes email templates by importing the virtual module
 * The virtual module is generated by Nitro during build/dev startup
 */
async function initializeTemplates() {
  // Prevent multiple concurrent initializations
  if (initPromise) {
    return initPromise
  }

  initPromise = (async () => {
    try {
      // @ts-expect-error - #email-templates is a Nitro virtual module generated at build time
      const virtualModule = await import('#email-templates')

      emailTemplates = virtualModule.emailTemplates || {}
      emailTemplateMapping = virtualModule.emailTemplateMapping || {}

      initialized = true
    }
    catch {
      // Silently handle missing virtual module - this is expected when:
      // 1. The consuming app doesn't have any email templates
      // 2. During prerendering when the module hasn't been properly initialized
      // 3. In environments where email rendering is not needed

      // Initialize with empty objects if module is not available
      emailTemplates = {}
      emailTemplateMapping = {}
      initialized = true // Mark as initialized to prevent retries
    }
    finally {
      initPromise = null
    }
  })()

  return initPromise
}

/**
 * Ensures templates are initialized before use
 */
async function ensureInitialized() {
  if (!initialized) {
    await initializeTemplates()
  }
}

/**
 * Get an email template component by name
 */
export async function getEmailTemplate(
  templateName: string,
): Promise<Component | null> {
  await ensureInitialized()

  const template = emailTemplates[templateName]

  if (!template) {
    console.warn(`[nuxt-email-renderer] Template "${templateName}" not found`)
    return null
  }

  return template
}

/**
 * Get template metadata by name
 */
export async function getEmailTemplateInfo(
  templateName: string,
): Promise<EmailTemplateInfo | null> {
  await ensureInitialized()

  return emailTemplateMapping[templateName] || null
}

/**
 * Get all available email templates
 */
export async function getAllEmailTemplates(): Promise<EmailTemplateInfo[]> {
  await ensureInitialized()

  return Object.values(emailTemplateMapping)
}

/**
 * Check if a template exists
 */
export async function hasEmailTemplate(templateName: string): Promise<boolean> {
  await ensureInitialized()

  return templateName in emailTemplates
}
